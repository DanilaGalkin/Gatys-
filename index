import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import transforms, models, utils
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

# 1. Загрузка и предобработка изображений
def load_image(image_path, max_size=400, shape=None):
    '''Загружает, изменяет размер и нормализует изображение'''
    image = Image.open(image_path).convert('RGB')

    # Изменение размера, если необходимо
    if max(image.size) > max_size:
        size = max_size
    else:
        size = max(image.size)

    if shape is not None:
        size = shape

    in_transform = transforms.Compose([
                        transforms.Resize(size),
                        transforms.ToTensor(),
                        transforms.Normalize((0.485, 0.456, 0.406),
                                             (0.229, 0.224, 0.225))]) # Стандартная нормализация ImageNet

    # Убираем предупреждение о truncate
    from PIL import ImageFile
    ImageFile.LOAD_TRUNCATED_IMAGES = True

    image = in_transform(image).unsqueeze(0) # Добавляем размерность батча
    return image

# Замените на ваши пути к изображениям
content_path = 'content.jpg'
style_path = 'style.jpg'

content = load_image(content_path).to("cuda" if torch.cuda.is_available() else "cpu")
style = load_image(style_path, shape=content.shape[-2:]).to("cuda" if torch.cuda.is_available() else "cpu")  # Размер стиля = размеру контента

print("Content and Style images loaded successfully!")